const SlackBot = require('slackbots');
const axios = require('axios');

const bot = new SlackBot({
  token: 'your-slack-api-token-here',
  name: 'yourbotname'
});

// Start Handler
bot.on('start', () => {
  const params = {
    icon_emoji: ':slightly_smiling_face:' // Replace with desired emoji
  };

  // TODO: Better info text needed or decide if this is even needed
  bot.postMessageToChannel(
    'bot-testing',
    'Ask @yourbotname something.',
    params
  );
});

// Error Handler
bot.on('error', err => console.log(err));

// Message Handler
bot.on('message', function(message) {
  if (message.type === 'message' && Boolean(message.text)) {
    // Only proceed if the message was not generated by the bot
    if(message.username !== 'yourbotname') {
      handleMessage(message);
    }
  }
});

// Respons to Data
function handleMessage(message) {
  // TODO: Better action mapping logic
  if (message.text !== null) {
    // Match the message to a desired action
    switch (parseMessageAction(message)) {
      case 'help':
        runHelp(message);
        break;
      case 'question':
        getAtlassianSearchResult(message, 'someConfluenceSpace', 0);
        break;
      case 'documentation':
        getAtlassianSearchResult(message, 'someConfluenceSpace', 0);
        break;
    }
  }
}

// Gets a result from Atlassian confluence search results
function getAtlassianSearchResult(message, confluenceSpace, resultOffset) {
  const apiKey = 'your-atlassian-api-key';
  const keyword = parseMessageKeywords(message);
  const confluenceType = 'page';
  // Build a query string for searching
  const confluenceCli = 'siteSearch+~+"' + keyword + '"+and+space+=+"' 
    + confluenceSpace + '"+and+type+=+"' + confluenceType + '"';

  // Do get request to atlassian search api
  // Example: https://yourDomain.atlassian.net/wiki/rest/api/search?cql=siteSearch+~+%22timesheet%22+and+space+%3D+%22PD%22+and+type+%3D+%22page%22&queryString=timesheet&start=0&limit=1
  axios({
    method:'get',
    url:'https://yourDomain.atlassian.net/wiki/rest/api/search',
    auth: {
      username: 'yourAtlassianUser@example.com', //TODO: set to general user
      password: apiKey
    },
    params: {
      cql: confluenceCli,
      limit: 1,
      start: resultOffset,
      queryString: keyword
    }
  }).then(function (response) {
    var help_message = '';

    // If we get a response item back from atlassian
    if (typeof response.data.results[0] !== 'undefined') {
      // Build the response message for the first and only response content
      help_message = 'I found: ```' + response.data.results[0].content.title 
        + '\n' + response.data._links.base + response.data.results[0].url
        + '```';
    }
    // Else no results found message
    else {
      help_message = 'I didn\'t find anything but you can have a look here:\n'
        + 'https://yourDomain.atlassian.net/wiki/dosearchsite.action?cli='
        + confluenceCli + '&amp;queryString=' + keyword;
    }
    
    // Set the response emoji
    const params = {
      icon_emoji: ':slightly_smiling_face:' // Replace with desired emoji
    };

    // TODO verify if user visible messages are better than full visible
    bot.postEphemeral(
      message.channel, 
      message.user, 
      `${help_message}`, 
      params);

  }).catch(function (error) {
    console.log(error);
  });
}

// Parses out the actual keyword search body from the message
function parseMessageKeywords(message) {
  if ((message.text !== null) && (typeof message.text !== 'undefined')) {
    // Assumes message.text contains at least the app mention and action
    var message_parts = message.text.split(' ', 3);
    if (message_parts.length == 3) {
      // Assumes message_parts are app mention, action and keyword
      // Return the part after the action identifier
      return message_parts[2];
    }
  }
  return ''; // TODO replace with exception
}

// Parses out the actual action from the message
function parseMessageAction(message) {
  if ((message.text !== null) && (typeof message.text !== 'undefined')) {
    var message_parts = message.text.split(' ');
    if (message_parts.length > 1) {
      // Assumes message_parts are app mention, action and whatever is left
      // Return the action identifier
      return message_parts[1].toLowerCase();
    }
  }
  return ''; // TODO replace with exception
}

// Show Help Text
function runHelp(message) {
  const params = {
    icon_emoji: ':slightly_smiling_face:' // Replace with desired emoji
  };

  // TODO: Add better help message
  // TODO verify if user visible messages are better than full visible
  bot.postEphemeral(
    message.channel,
    message.user,
    `Type @yourbotname followed by a request like 'question where is dev documentation', and I will try to find an answer.`,
    params
  );
}
